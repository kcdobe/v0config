
#####################################################################
# Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    SKEW_PROFILE LOAD=CaliFlower
    STATUS_HEATING
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set HALF_EXTRUDER_TEMP = EXTRUDER_TEMP/2 %}
    # Start bed heating
    M140 S{BED_TEMP}
    M109 S{HALF_EXTRUDER_TEMP}
    G28 X
    G28 Y
    Attach_Probe_Lock
    G28 Z                          ; home all axes
    G90                            ; absolute positioning
    STATUS_HEATING
    M190 S{BED_TEMP}
    #BED_MESH_CALIBRATE
    _Probe_Unlock
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE=default
    BED_MESH_PROFILE LOAD=default
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    SET_FAN_SPEED FAN=Bed_Fan SPEED=.45
    ;SMART_PARK
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP}
    G1 Z20 F3000                   ; move nozzle away from bed
    G1 E25.0 F3600
    STATUS_PRINTING
    LINE_PURGE

[gcode_macro PRINT_START_NO_MESH]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    SKEW_PROFILE LOAD=CaliFlower
    STATUS_HEATING
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set HALF_EXTRUDER_TEMP = EXTRUDER_TEMP/2 %}
    # Start bed heating
    M140 S{BED_TEMP}
    M109 S{HALF_EXTRUDER_TEMP}
    G28                            ; home all axes
    G90                            ; absolute positioning
    STATUS_HEATING
    M190 S{BED_TEMP}
    #BED_MESH_CALIBRATE
    #BED_MESH_CLEAR
    #BED_MESH_CALIBRATE
    #BED_MESH_PROFILE SAVE=default
    BED_MESH_PROFILE LOAD=default
    SMART_PARK
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    SET_FAN_SPEED FAN=Bed_Fan SPEED=.45
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP}
    G1 Z20 F3000                   ; move nozzle away from bed
    G1 E25.0 F3600
    STATUS_PRINTING
    LINE_PURGE
    
[gcode_macro PRINT_END_ABS]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-30.0 F1500                ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    SET_SKEW CLEAR=1
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-10} F3600       ; park nozzle at rear
    STATUS_READY
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=300

[gcode_macro PRINT_END_PA]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3.0 F1500                ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    SET_SKEW CLEAR=1
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-10} F3600       ; park nozzle at rear
    STATUS_READY
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=300

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro LEVEL_BED]
gcode:
    SCREWS_TILT_CALCULATE

[gcode_macro MESH_BED]
gcode:
    BED_MESH_CALIBRATE

[gcode_macro SET_SQUISH]
gcode:
    Z_ENDSTOP_CALIBRATE

[delayed_gcode reset_timeout]
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=600
  
[gcode_macro preheat_timeout]
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=1200
  UPDATE_DELAYED_GCODE ID=reset_timeout DURATION=1200

[gcode_macro HEATSOAK_CHAMBER]
description: Heatsoak chamber to a specific temperature with a timeout
gcode:
    {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
    {% set MAXTIME = params.MAXTIME|default(15)|int %}

    {% for _ in range(1, 20 * MAXTIME) %}
        {% set CURRENT_TEMP = printer["temperature_sensor Chamber_Thermistor"].temperature|float %}
        {% if CURRENT_TEMP < SETPOINT_TEMP %}
            _WAIT_CHAMBER_TEMP TEMP={SETPOINT_TEMP}
        {% endif %}
    {% endfor %}
    RESPOND MSG="Chamber temperature OK!"

[gcode_macro _WAIT_CHAMBER_TEMP]
# This macro is needed to allow klipper populate a new value in the printer[...].temperature variable
# as each variables are populated only once at the beginning of every macro call
gcode:
    {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
    {% set CURRENT_POWER = printer.heater_bed.power %}
    {% set CURRENT_FAN = printer['fan_generic Bed_Fan'].speed|float %}
    {% set NEW_FAN = CURRENT_FAN %}
    RESPOND MSG="Current power: {CURRENT_POWER}, Current fan: {CURRENT_FAN}"
    
    {% if CURRENT_POWER < 0.95 %}            
        {% if CURRENT_FAN < 1.0 %}
            {% set NEW_FAN = CURRENT_FAN + 0.02 %}
        {% endif %}
    {% else %}
        {% if CURRENT_FAN > 0.0 %}
            {% set NEW_FAN = CURRENT_FAN - 0.02 %}
        {% endif %}
    {% endif %}
    
    {% if NEW_FAN > 1.0 %}
        {% set NEW_FAN = 1.0 %}
     {% elif NEW_FAN < 0.0 %}
        {% set NEW_FAN = 0.0 %}
    {% endif %}
    
    {% if CURRENT_FAN != NEW_FAN %}
        SET_FAN_SPEED FAN=Bed_Fan SPEED={ NEW_FAN }
    {% endif %}
    G4 P3000

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT_RATIO = 0.7 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    G28 X
    # Move away
    G91
    G1 X-25 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT_RATIO = 0.7 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    G90
    G28 Z
    G1 Z30

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 60.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 60.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 30.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 25.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 60  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 115  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "UPDATE_DELAYED_GCODE ID=filter_off DURATION=300"     ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode: